{
  "uid" : "53bcd3ba5abe4ee6",
  "name" : "全字段正常流5",
  "fullName" : "test_case.user1.test_signup1#test_zhu_ce5",
  "historyId" : "99ab4e6d4877562d960084556e9429a6",
  "time" : {
    "start" : 1568258735406,
    "stop" : 1568258735572,
    "duration" : 166
  },
  "status" : "failed",
  "statusDetails" : {
    "message" : "AssertionError",
    "trace" : "@allure.epic(\"商城后台系统\")\n    @allure.feature(\"用户模块\")\n    @allure.story(\"注册接口\")\n    @allure.title('全字段正常流5')\n    def test_zhu_ce5():\n        # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api\n        url = conf.GY_API_URL + '/signup'\n    \n        req = {\n            \"phone\": \"181 0390 9787\",\n            \"pwd\": \"aaa3333\",\n            \"rePwd\": \"aaa3333\",\n            \"userName\": \"347dfhg\"\n            }\n    \n        resp = request_tool.post_request(url, json=req)\n        body = resp.json()\n        # 判断响应码\n        assert_tool.assert_equal(resp.status_code, 200)\n        allure.attach(\"预期结果:{},实际结果:{}\".format(200,resp.status_code),\"响应状态码断言\",allure.attachment_type.TEXT)\n        assert_tool.assert_equal(resp.status_code,200)\n        # 自定义断言\n>       assert_tool.assert_equal(body['code'], 2000)\n\ntest_case\\user1\\test_signup1.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nbody = 9999, expected_msg = 2000\n\n    def assert_equal(body, expected_msg):\n        \"\"\"\n        验证response body中是否等于预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n>           assert body == expected_msg\nE           AssertionError\n\nvenv\\lib\\site-packages\\tools\\assert_tool.py:35: AssertionError",
    "flaky" : true
  },
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusDetails" : {
      "message" : "AssertionError",
      "trace" : "@allure.epic(\"商城后台系统\")\n    @allure.feature(\"用户模块\")\n    @allure.story(\"注册接口\")\n    @allure.title('全字段正常流5')\n    def test_zhu_ce5():\n        # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api\n        url = conf.GY_API_URL + '/signup'\n    \n        req = {\n            \"phone\": \"181 0390 9787\",\n            \"pwd\": \"aaa3333\",\n            \"rePwd\": \"aaa3333\",\n            \"userName\": \"347dfhg\"\n            }\n    \n        resp = request_tool.post_request(url, json=req)\n        body = resp.json()\n        # 判断响应码\n        assert_tool.assert_equal(resp.status_code, 200)\n        allure.attach(\"预期结果:{},实际结果:{}\".format(200,resp.status_code),\"响应状态码断言\",allure.attachment_type.TEXT)\n        assert_tool.assert_equal(resp.status_code,200)\n        # 自定义断言\n>       assert_tool.assert_equal(body['code'], 2000)\n\ntest_case\\user1\\test_signup1.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nbody = 9999, expected_msg = 2000\n\n    def assert_equal(body, expected_msg):\n        \"\"\"\n        验证response body中是否等于预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n>           assert body == expected_msg\nE           AssertionError\n\nvenv\\lib\\site-packages\\tools\\assert_tool.py:35: AssertionError",
      "flaky" : false
    },
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "9028695de71cc141",
      "name" : "请求",
      "source" : "9028695de71cc141.txt",
      "type" : "text/plain",
      "size" : 314
    }, {
      "uid" : "22c08999349eae5a",
      "name" : "响应",
      "source" : "22c08999349eae5a.txt",
      "type" : "text/plain",
      "size" : 214
    }, {
      "uid" : "bfc684d78c6b458c",
      "name" : "响应状态码断言",
      "source" : "bfc684d78c6b458c.txt",
      "type" : "text/plain",
      "size" : 33
    }, {
      "uid" : "46f93b8d19dc84f9",
      "name" : "log",
      "source" : "46f93b8d19dc84f9.txt",
      "type" : "text/plain",
      "size" : 1369
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 4,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "用户模块"
  }, {
    "name" : "epic",
    "value" : "商城后台系统"
  }, {
    "name" : "story",
    "value" : "注册接口"
  }, {
    "name" : "parentSuite",
    "value" : "test_case.user1"
  }, {
    "name" : "suite",
    "value" : "test_signup1"
  }, {
    "name" : "subSuite"
  }, {
    "name" : "host",
    "value" : "SKY-20190805LNB"
  }, {
    "name" : "thread",
    "value" : "11896-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.user1.test_signup1"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "5ae215586459e02d",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1568258691631,
        "stop" : 1568258691797,
        "duration" : 166
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "53bcd3ba5abe4ee6.json",
  "statusDetailsSafe" : {
    "message" : "AssertionError",
    "trace" : "@allure.epic(\"商城后台系统\")\n    @allure.feature(\"用户模块\")\n    @allure.story(\"注册接口\")\n    @allure.title('全字段正常流5')\n    def test_zhu_ce5():\n        # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api\n        url = conf.GY_API_URL + '/signup'\n    \n        req = {\n            \"phone\": \"181 0390 9787\",\n            \"pwd\": \"aaa3333\",\n            \"rePwd\": \"aaa3333\",\n            \"userName\": \"347dfhg\"\n            }\n    \n        resp = request_tool.post_request(url, json=req)\n        body = resp.json()\n        # 判断响应码\n        assert_tool.assert_equal(resp.status_code, 200)\n        allure.attach(\"预期结果:{},实际结果:{}\".format(200,resp.status_code),\"响应状态码断言\",allure.attachment_type.TEXT)\n        assert_tool.assert_equal(resp.status_code,200)\n        # 自定义断言\n>       assert_tool.assert_equal(body['code'], 2000)\n\ntest_case\\user1\\test_signup1.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nbody = 9999, expected_msg = 2000\n\n    def assert_equal(body, expected_msg):\n        \"\"\"\n        验证response body中是否等于预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n>           assert body == expected_msg\nE           AssertionError\n\nvenv\\lib\\site-packages\\tools\\assert_tool.py:35: AssertionError",
    "flaky" : true
  },
  "statusMessage" : {
    "present" : true
  },
  "parameterValues" : [ ]
}