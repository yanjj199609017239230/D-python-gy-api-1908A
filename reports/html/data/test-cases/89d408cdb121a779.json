{
  "uid" : "89d408cdb121a779",
  "name" : "test_run[充值]",
  "fullName" : "test_case.user1.test_run#test_run[充值]",
  "historyId" : "4dd193065df732619fc0e229612da1a6",
  "time" : {
    "start" : 1568271269184,
    "stop" : 1568271269353,
    "duration" : 169
  },
  "status" : "failed",
  "statusDetails" : {
    "message" : "AssertionError",
    "trace" : "d = {'data': None, 'headers': {}, 'json': {'accountName': 'xuerje213', 'changeMoney': 200}, 'params': None, ...}\n\n    @pytest.mark.parametrize(\"d\",data[1],ids=data[0])\n    @allure.epic(\"一级标题\")\n    @allure.feature(\"二级标题\")\n    @allure.story(\"三级标题\")\n    def test_run(d):\n>       request_tamp(d)\n\ntest_case\\user1\\test_run.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntool\\request_tamp.py:40: in request_tamp\n    assert_tool.assert_in(resp.text, expect)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nbody = '{\"code\":9999,\"message\":\"该账户不存在\",\"data\":\"\"}', expected_msg = '2000'\n\n    def assert_in(body, expected_msg):\n        \"\"\"\n        验证response body中是否包含预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            text = json.dumps(body, ensure_ascii=False)\n            # print(text)\n>           assert expected_msg in text\nE           AssertionError\n\nvenv\\lib\\site-packages\\tools\\assert_tool.py:19: AssertionError",
    "flaky" : false
  },
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusDetails" : {
      "message" : "AssertionError",
      "trace" : "d = {'data': None, 'headers': {}, 'json': {'accountName': 'xuerje213', 'changeMoney': 200}, 'params': None, ...}\n\n    @pytest.mark.parametrize(\"d\",data[1],ids=data[0])\n    @allure.epic(\"一级标题\")\n    @allure.feature(\"二级标题\")\n    @allure.story(\"三级标题\")\n    def test_run(d):\n>       request_tamp(d)\n\ntest_case\\user1\\test_run.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntool\\request_tamp.py:40: in request_tamp\n    assert_tool.assert_in(resp.text, expect)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nbody = '{\"code\":9999,\"message\":\"该账户不存在\",\"data\":\"\"}', expected_msg = '2000'\n\n    def assert_in(body, expected_msg):\n        \"\"\"\n        验证response body中是否包含预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            text = json.dumps(body, ensure_ascii=False)\n            # print(text)\n>           assert expected_msg in text\nE           AssertionError\n\nvenv\\lib\\site-packages\\tools\\assert_tool.py:19: AssertionError",
      "flaky" : false
    },
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "9719b657ad92c668",
      "name" : "请求",
      "source" : "9719b657ad92c668.txt",
      "type" : "text/plain",
      "size" : 281
    }, {
      "uid" : "4c0dbe4a8dbec813",
      "name" : "响应",
      "source" : "4c0dbe4a8dbec813.txt",
      "type" : "text/plain",
      "size" : 205
    }, {
      "uid" : "f710bce61cc93e1e",
      "name" : "响应状态码断言",
      "source" : "f710bce61cc93e1e.txt",
      "type" : "text/plain",
      "size" : 39
    }, {
      "uid" : "f3f88da7720f1caa",
      "name" : "响应正文断言",
      "source" : "f3f88da7720f1caa.txt",
      "type" : "text/plain",
      "size" : 91
    }, {
      "uid" : "1445fe736163baa7",
      "name" : "log",
      "source" : "1445fe736163baa7.txt",
      "type" : "text/plain",
      "size" : 1301
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 5,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "二级标题"
  }, {
    "name" : "epic",
    "value" : "一级标题"
  }, {
    "name" : "story",
    "value" : "三级标题"
  }, {
    "name" : "parentSuite",
    "value" : "test_case.user1"
  }, {
    "name" : "suite",
    "value" : "test_run"
  }, {
    "name" : "subSuite"
  }, {
    "name" : "host",
    "value" : "SKY-20190805LNB"
  }, {
    "name" : "thread",
    "value" : "8356-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.user1.test_run"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "d",
    "value" : "{'data': None, 'expect': '2000', 'headers': {}, 'json': {'accountName': 'xuerje213', 'changeMoney': 200}, 'method': 1, 'params': None, 'status_code': 200, 'url': '/acc/recharge'}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "extra" : {
    "tags" : [ ]
  },
  "source" : "89d408cdb121a779.json",
  "statusDetailsSafe" : {
    "message" : "AssertionError",
    "trace" : "d = {'data': None, 'headers': {}, 'json': {'accountName': 'xuerje213', 'changeMoney': 200}, 'params': None, ...}\n\n    @pytest.mark.parametrize(\"d\",data[1],ids=data[0])\n    @allure.epic(\"一级标题\")\n    @allure.feature(\"二级标题\")\n    @allure.story(\"三级标题\")\n    def test_run(d):\n>       request_tamp(d)\n\ntest_case\\user1\\test_run.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntool\\request_tamp.py:40: in request_tamp\n    assert_tool.assert_in(resp.text, expect)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nbody = '{\"code\":9999,\"message\":\"该账户不存在\",\"data\":\"\"}', expected_msg = '2000'\n\n    def assert_in(body, expected_msg):\n        \"\"\"\n        验证response body中是否包含预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            text = json.dumps(body, ensure_ascii=False)\n            # print(text)\n>           assert expected_msg in text\nE           AssertionError\n\nvenv\\lib\\site-packages\\tools\\assert_tool.py:19: AssertionError",
    "flaky" : false
  },
  "statusMessage" : {
    "present" : true
  },
  "parameterValues" : [ "{'data': None, 'expect': '2000', 'headers': {}, 'json': {'accountName': 'xuerje213', 'changeMoney': 200}, 'method': 1, 'params': None, 'status_code': 200, 'url': '/acc/recharge'}" ]
}